import keras libraries 
from keras.models import Sequential 
from keras.layers import Dense 
from keras.layers import Conv2D 
from keras.layers import MaxPooling2D 
from keras.layers import Flatten 
model=Sequential() 
model.add(Conv2D(64,3,3,input_shape=(128,128,3),activation='relu')) 
model.add(Conv2D(64,3,3,activation='relu')) 
model.add(Conv2D(64,3,3,activation='relu')) 
model.add(MaxPooling2D(pool_size=(2,2))) 
model.add(MaxPooling2D(pool_size=(2,2))) 
model.add(MaxPooling2D(pool_size=(2,2))) 
model.add(Flatten()) 
model.add(Dense(output_dim=128,activation='relu',init='random_uniform')) model.add(Dense(output_dim=3,activation='softmax',init='random_uniform')) model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy']) from keras.preprocessing.image import ImageDataGenerator 
train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal _flip=True) 
test_datagen = ImageDataGenerator(rescale=1./255) 

x_train =  
train_datagen.flow_from_directory(r'C:/Users/Hemanth/Desktop/Dataset/train',target_size=(128, 128),batch_size=32,class_mode='categorical') 
x_test =  
test_datagen.flow_from_directory(r'C:/Users/Hemanth/Desktop/Dataset/test',target_size=(128,12 8),batch_size=32,class_mode='categorical') 
print(x_train.class_indices) 
model.fit_generator(x_train,samples_per_epoch =  
128,epochs=25,validation_data=x_test,nb_val_samples=48) 
model.save('abc.h5') 
from keras.models import load_model 
import numpy as np 
import cv2 
model =load_model('abc.h5') 
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy']) 
from skimage.transform import resize 
def detect(frame): 
 try: 
 img= resize(frame,(128,128)) 
 img = np.expand_dims(img,axis=0) 
 if(np.max(img)>1): 
 img =img/255.0 
 prediction =model.predict(img) 
 print (prediction) 
 prediction_class = model.predict_classes(img) 

 print(prediction_class) 
 except AttributeError: 
 print("shape not found") 
frame= cv2.imread(r"C:\Users\Hemanth\Desktop\Dataset\Train\Bananna\ban (7).jpeg") data= detect(frame) 
from tkinter import * 
root = Tk() 
root.configure(background = 'grey') 
import numpy as np 
from keras.preprocessing import image 
from PIL import ImageTk, Image 
from tkinter import filedialog 
import os 
from keras.models import load_model 
classifier = load_model(r'C:\Users\Hemanth\abc.h5') 
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy']) 
root.geometry("550x400+500+250") 
root.resizable(width=True, height=True) 
def openfn(): 
 filename = filedialog.askopenfilename(title='open') 

 return filename 
def open_img(): 
 root2 = Tk() 
 root2.configure(background = 'grey') 
 root2.geometry("550x400+500+250") 
 root2.resizable(width=True, height=True) 
 x = openfn() 
 test_image = image.load_img(x, target_size = (128, 128)) 
 test_image = image.img_to_array(test_image) 
 test_image = np.expand_dims(test_image, axis = 0) 
 result = classifier.predict_classes(test_image) 
 print(result) 
 index= ['Apple','Banana','Kiwi'] 
 print(index[result[0]]) 
 global label1  
 label1= Label( root,text="\n\nPrediction : "+str(index[result[0]]),font="Times  28",bg="grey",fg="cyan") 
 global label  
 label= Label( root2,text="\n\nPrediction : "+str(index[result[0]]),font="Times  28",bg="grey",fg="cyan") 
 if result==[0]: 
 label2= Label(root2,text="\n Nutrients of "+str(index[result[0]]),font="Times  24",bg="grey", fg="yellow") 
 label3= Label(root2,text="\nCabohydrates:23g \nProtien:1.1g \nVitamin A:1 % \nVitamin  C:14% \nIron:1%\n\n",font="Times 16",bg="grey") 

 label.pack_forget() 
 elif result==[1] : 
 label2= Label(root2,text="\n Nutrients of "+str(index[result[0]]),font="Times  24",bg="grey", fg="orange") 
 label3= Label(root2,text="\nCabohydrates:9.57g \nProtien:0.73g \nVitamin A:1.5 %  \nVitamin C:23 % \nCalcium:6 % \nIron:4 %\n\n",font="Times 16",bg="grey") 
 elif result==[2] : 
 label2= Label(root2,text="\n Nutrients of "+str(index[result[0]]),font="Times  24",bg="grey",fg="red") 
 label3= Label(root2,text="\nCabohydrates:28g \nProtien:2g \nVitamin C:44%  \nCalcium:4% \nIron:9%\n\n",font="Times 16",bg="grey") 
 elif result==[3] : 
 label2= Label(root2,text="\n Nutrients of "+str(index[result[0]]),font="Times  24",bg="grey",fg="black") 
 label3= Label(root2,text="\nCabohydrates:5.33g \nProtien:0.17g \nVitamin B-6: 0.012 mg  \nPotassium: 47 mg \nIron:0.07mg\n\n",font="Times 16",bg="grey") 
 else : 
 label2= Label(root2,text="\n Nutrients of "+str(index[result[0]]),font="Times  24",bg="grey",fg="green") 
 label3= Label(root2,text="\nCabohydrates:23g \nProtien:1.1g \nVitamin A:1 % \nVitamin  C:14% \nIron:1% \n\n",font="Times 16",bg="grey") 
 label.pack() 
 label2.pack() 
 label3.pack() 
 img = Image.open(x) 
 img = img.resize((128, 128), Image.ANTIALIAS) 
 img = ImageTk.PhotoImage(img) 

 label4=Label(root,text="\n uploaded image is:\n").pack() 
 panel = Label(root, image=img) 
 #panel.image = http://localhost:8888/notebooks/proj1.ipynb #img 
 panel.pack() 
  
btn2 = Button(root, text='upload an image', command=open_img,relief=GROOVE ,width=30) btn2.pack() 
  
root.mainloop() 

